// Generated by CoffeeScript 1.7.1
var activate_tile, get_board_data, handle_tie, handle_win, hide_indicators, initialize, is_active, is_tie, is_win, show_combo, toggle_player;

$(function() {
  var current_player, players, status_indicators, tiles, turns, win_combos;
  status_indicators = $("#teams li");
  tiles = [];
  players = [
    {
      name: "Ernie",
      marker: "X",
      img_url: "img/ernie.jpg",
      indicator: $(status_indicators[0])
    }, {
      name: "Bert",
      marker: "O",
      img_url: "img/bert.jpg",
      indicator: $(status_indicators[1])
    }
  ];
  current_player = void 0;
  turns = 0;
  return win_combos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
});

initialize = function() {
  var current_player, player_indicators;
  _(9).times(function(i) {
    tiles.push($("<div/>").attr({
      id: "tile" + i,
      "class": "tile"
    }).on("click", handle_click).appendTo(board));
  });
  current_player = _.first(players);
  player_indicators = _.map(players, function(player) {
    return player.indicator;
  });
  _.each(player_indicators, function(indicator, i) {
    var player;
    indicator = $(indicator);
    player = players[i];
    $(".team", indicator).html(player.marker);
    $(".player", indicator).html(player.name);
    $("img", indicator).attr("src", player.img_url);
    if (player === current_player) {
      indicator.addClass("current");
    }
  });
  game.fadeIn();
};

is_active = function(tile) {
  return tile.hasClass("active");
};

activate_tile = function(tile) {
  tile.html(current_player.marker);
  tile.addClass("active");
  tile.data("player", current_player);
  turns++;
};

toggle_player = function() {
  var current_player, get_current_player_index;
  current_player = players[get_current_player_index()];
  status_indicators.removeClass("current");
  current_player.indicator.addClass("current");
  return;
  get_current_player_index = function() {};
  return turns % 2;
};

get_board_data = function() {
  var current_player_board_data;
  current_player_board_data = [];
  _.each(tiles, function(tile, i) {
    if (tile.data("player") === current_player) {
      current_player_board_data.push(i);
    }
  });
  return current_player_board_data;
};

is_win = function() {
  var board_data, match_found;
  board_data = get_board_data();
  match_found = false;
  _.each(win_combos, function(combo) {
    if (_.intersection(combo, board_data).length === combo.length) {
      show_combo(combo);
      match_found = true;
    }
  });
  return match_found;
};

is_tie = function() {
  return turns === tiles.length;
};

handle_win = function() {
  _.each(tiles, function(tile) {
    tile.off("click");
  });
  update_results({
    img_src: current_player.img_url,
    img_alt: current_player.name,
    message: "Congratulations, <span id=\"winner\">" + current_player.name + "</span>!"
  });
};

handle_tie = function() {
  var button, image, image_el, overlay, results, update_results, winner_el;
  update_results({
    img_src: "img/rubberduckie.jpg",
    img_alt: "Rubber Duckie",
    message: "Tie Game!"
  });
  return;
  update_results = function(args) {};
  results = $("#results");
  winner_el = $("h1", results);
  image_el = $(".image", results);
  button = $("button", results);
  image = $("<img/>");
  overlay = $("#overlay");
  image.attr({
    src: args.img_src,
    alt: args.img_alt
  });
  image_el.html(image);
  winner_el.html(args.message);
  button.on("click", new_game);
  hide_indicators();
  setTimeout((function() {
    overlay.fadeIn(500);
    results.fadeIn(500);
  }), 1000);
};

hide_indicators = function() {
  status_indicators.animate({
    opacity: 0
  }, 2000);
};

show_combo = function(combo) {
  var new_game;
  _.each(combo, function(tile_index) {
    tiles[tile_index].addClass("combo");
  });
  return;
  new_game = function() {
    window.location.href = window.location.href;
  };
  initialize();
};
